def alpha_beta_decision(self):
    alpha = float('-inf')
    beta = float('inf')
    best_score = float('-inf')
    best_move = None

    for move in [2, 3]:
        if self.skaitlis % move == 0:
            new_score = self.min_value(self.skaitlis // move, alpha, beta, 1)
            if new_score > best_score:
                best_score = new_score
                best_move = move

    return best_move

def min_value(self, skaitlis, alpha, beta, depth):
    if depth == 0 or skaitlis in [2, 3]:
        return self.evaluate_state(skaitlis)
    
    value = float('inf')
    for move in [2, 3]:
        if skaitlis % move == 0:
            value = min(value, self.max_value(skaitlis // move, alpha, beta, depth - 1))
            if value <= alpha:
                return value
            beta = min(beta, value)
    return value

def max_value(self, skaitlis, alpha, beta, depth):
    if depth == 0 or skaitlis in [2, 3]:
        return -self.evaluate_state(skaitlis)
    
    value = float('-inf')
    for move in [2, 3]:
        if skaitlis % move == 0:
            value = max(value, self.min_value(skaitlis // move, alpha, beta, depth - 1))
            if value >= beta:
                return value
            alpha = max(alpha, value)
    return value

def evaluate_state(self, skaitlis):
    return -skaitlis
def computer_move(self):
    best_move = self.alpha_beta_decision()
    if best_move:
        self.dalit(best_move)
    else:
        self.paradit_galarezultatu()
